适配器：将一个类的接口转换成客户希望的另外一个接口。
	适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。

桥接：将抽象部分与它的实现部分分离，使它们都可以独立地变化。
组合：将对象组合成树形结构以表示"部分-整体"的层次结构，组合模式使得用户
	 对单个对象和组合对象的使用具有一致性。

装饰：动态地给一个对象添加一些额外的职责。就增加功能来说，装饰模式相比生成子类更加灵活。
外观：为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。
享元：为运用共享技术有效地支持大量细粒度的对象。
代理：为其他对象提供一种代理以控制对这个对象的访问。


适配器:面向对象的精神就是更好地应对需求的变化，想使用一个以及存在的类，而它的接口不符合要求，
	  或者希望创建一个可以复用的类，该类可以与其它不相关的类或不可预见的类协同工作。适配器可以让这些接口不同的类通过适配后协同工作。

桥接模式满足合成聚合复用规则；
继承往往会被过度使用，继承会导致类的结构过于负责，关系太多难以维护，扩展性非常差。
如果能发现继承体系中，有两个甚至多个方向的变化，那么就解耦这些不同方向的变化，通过对象组合的方式，
把两个角色之间的继承关系改为了组合关系，从而使得这两者可以应对各自对立的变化。桥接面对变化的处理方式是“找出变化并封装”。

装饰模式，以动态、透明的方式给单个对象添加职责，并在不需要时，撤销相应的职责。

组合模式，擅长表示对象的部分与整体的层次结构，使用户忽略组合对象与单个对象的不同，用户可以统一地使用组合结构中的所有对象。
用户使用组合类接口与组合结构中的对象进行交互，如果接收者是一个叶节点，则直接处理请求，如果接收者是组合对象，通常将请求发送给他的子部件，
并在转发请求之前或之后可能仔细一些辅助操作。组合模式的效果是“客户可以一致地使用组合结构和单个对象。任何用到基本对象的地方都可以使用组合对象。”

迪米特法则实践
外观模式：信息的隐藏促进了软件的复用，如果两个类不必彼此直接通信，那么就不要让这两个类发生直接的相互作用。应该让一个软件中的子系统间的通信和相互依赖关系达到最小，
而具体的办法就是引入一个外观对象，它为子系统间提供了一个单一而简单的屏障。

对象使得内存占用过多，而且如果都是大量重复的对象，那就是资源的极大浪费，会使得机器性能减慢。享元解决这个问题。

代理与外观适配器的区别。
代理与外观的主要区别在于，代理对象代表一个单一对象，而外观对象代表一个子系统；
代理的客户对象无法直接访问目标对象，由代理提供对单独的目标对象的访问控制，而外观的客户对象可用直接访问子系统中的各个对象，但通常由于外观对象提供对子系统各原件功能的简化的共同层次的调用。
代理是一种原来对象的代表，其他需要与这个对象打交道的操作都是和这个代表交涉。而适配器则不需要虚构出一个代表者，只需要为应付特定使用目的，将原来的类进行一些组合。


适配器主要是解决两个已有接口之间不匹配的问题，不需要考虑这些接口是怎样实现的。也不考虑它们各自可能会如何演化。不需要对两个独立设计的类中任一个进行重新设计，就能够使他们协同工作。
桥接模式在设计之初，就对抽象接口与它的实现部分进行桥接，让抽象与实现两者可以独立演化。

桥接和适配器被用于软件生命周期的不同阶断，针对的是不同的问题。
外观模式和适配器模式近似，外观定义的是一个新的接口，而适配器则是复用一个原有的接口。适配器是使得两个已有的接口协同工作，
外观则是为现存系统提供一个更为方便的访问接口。外观模式是适配整个子系统的，适配器是用来适配对象的。

外观的使用？










